openapi: 3.0.3
servers:
  - url: /v3
info:
  description: |-
    Server cho nhà sách Tini
    Source code:
    - [Frontend](https://github.com/TuanKietTran/tini-bookstore-fe)
    - [Backend](https://github.com/TuanKietTran/tini-bookstore-be)
  version: 1.0.0
  title: Swagger Tinibook - OpenAPI 3.0
  termsOfService: "http://swagger.io/terms/"
  contact:
    email: apiteam@swagger.io
  license:
    name: Apache 2.0
    url: "http://www.apache.org/licenses/LICENSE-2.0.html"
tags:
  - name: Product
    description: Everything about Product

  - name: Branch
    description: Access to Tinibook orders

  - name: Employee
    description: Operations about employees
paths:
  product/{id}:
    get:
      tags:
        - Product
      summary: Get a product information based on its ID
      parameters:
        - in: path
          name: id
          description: 
          schema:
            type: string
          required: false
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/book"
      responses:
        201:
          description: Created
        401:
          $ref: "#/components/responses/UnauthorizedError"
    delete:
      tags:
        - Product
      summary: Remove a product based on its ID
      parameters:
        - in: path
          name: id
          description:
          schema:
            type: string
          required: false
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/book"
      responses:
        201:
          description: Created
        401:
          $ref: "#/components/responses/UnauthorizedError"
  product/book:
    get:
      tags:
        - Product
      summary: Get all books on demand using search query
      parameters:
        - in: text
          name: search
          description: The search string, which could be the ID, ISBN or book name. Fuzzy search.
          schema:
            type: string
          required: false
      responses:
        200:
          description: List of Books
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/book"
        401:
          $ref: "#/components/responses/UnauthorizedError"
    post:
      tags:
        - Product
      summary: Import a new book
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/book"
      responses:
        201:
          description: Created
        401:
          $ref: "#/components/responses/UnauthorizedError"
security:
  - bearerAuth: []

components:
  schemas:
    login-body:
      type: object
      properties:
        "username":
          type: string
          example: "johndoe"
        "password":
          type: string
          example: "1234567890"

    token:
      type: object
      properties:
        "employeeId":
          type: string
          example: 1
        "occupation":
          $ref: "#/components/schemas/occupation"

    employee:
      type: object
      properties:
        "id":
          type: string
          format: uuid
        "name":
          type: string
        "ssn":
          description: Citizen Identification Number
          type: string
        "email":
          type: string
          format: email
        "tel":
          type: string
          format: phone
        "role":
          type: string
          example: "Manager"

    book:
      type: object
      properties:
        "uuid":
          type: number
        "name":
          type: string
        "isbn":
          type: number
        "price":
          type: string
        "discount":
          type: number
        "amount":
          type: number
        "publisher":
          type: string
        "publishingYear":
          type: number

    branch:
      type: object
      properties:
        "id":
          type: number
          example: 1
        "address":
          type: string
          example: "1 Võ Văn Ngân"

  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT

  responses:
    UnauthorizedError:
      description: Authentication information is missing or invalid
      headers:
        WWW_Authenticate:
          schema:
            type: string
